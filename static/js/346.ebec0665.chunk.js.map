{"version":3,"file":"static/js/346.ebec0665.chunk.js","mappings":"8LAIMA,EAAWC,EAAAA,MAAW,kBAAM,4BAAgC,IAWlE,EATgC,WAC9B,OACE,gBAAKC,UAAU,iBAAgB,UAC7B,SAAC,WAAc,CAACC,UAAU,SAAC,IAAO,IAAI,UACpC,SAACH,EAAQ,OAIjB,E,uECPMI,GAAYC,EAAAA,EAAAA,IAAG,oFAIfC,GAAaD,EAAAA,EAAAA,IAAG,wCAMTE,GAKTC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAY,gCARM,SAAH,GACjB,OAD6B,EAANE,OACPN,EAAYE,CAC9B,IAcMK,GAAUN,EAAAA,EAAAA,IAAG,wFAIbO,GAAYP,EAAAA,EAAAA,IAAG,yFAORQ,EAAcL,EAAAA,GAAAA,MAAY,kKAHhB,SAAH,GAClB,OAD8B,EAANM,OACRH,EAAUC,CAC5B,ICKA,EApC0B,WACxB,IACQG,GADSC,EAAAA,EAAAA,MACTD,SAEFE,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,kBAAgB,WACdF,GAASG,EAAAA,EAAAA,MACX,GAAG,IAEH,IAAMC,EAAkBN,EAASO,MAAM,KAAK,GAEtCC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,GAE/B,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAApCZ,EAAM,KAAEa,EAAS,KACxB,OACE,UAACd,EAAW,CACVe,aAAc,kBAAMD,GAAU,EAAK,EACnCE,aAAc,kBAAMF,GAAU,EAAM,EACpCb,OAAQA,EACRZ,UAAU,UAAS,WAEnB,uCAEW,OAAVqB,QAAU,IAAVA,OAAU,EAAVA,EAAYO,KAAI,YAAwB,IAArBC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KACtB,OACE,SAACzB,EAAU,CACTG,QAASqB,KAAQV,QAAyBY,EAC1CC,GAAE,gBAAWH,GAAK,SAEjBC,GAGP,MAGN,ECtCMG,EAA0B,WAAH,OAC3B,eAAIC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,OAAQC,MAAO,SAAU,8BAE9D,EAeP,EAbyB,WACvB,OACE,iBAAKrC,UAAU,SAAQ,WACrB,SAAC,EAAO,KACR,UAAC,KAAM,YACL,SAAC,KAAK,CAACsC,OAAK,EAACC,KAAK,IAAIC,UAAWP,KACjC,SAAC,KAAK,CAACK,OAAK,EAACC,KAAK,QAAQC,UAAWP,KACrC,SAAC,KAAK,CAACK,OAAK,EAACC,KAAK,oBAAoBC,UAAWC,SAIzD,C,0DChBalB,GAAsBmB,E,OAAAA,IACjC,CAHqB,SAACC,GAAa,OAAKA,EAAMC,QAAS,IAIvD,SAAAA,GAAQ,OAAIA,EAASvB,UAAU,G","sources":["components/main-container/main-container.component.tsx","components/sidebar/sidebar.styles.ts","components/sidebar/sidebar.component.tsx","components/layout/layout.component.tsx","redux/category/category.selector.ts"],"sourcesContent":["import React from 'react';\nimport './main-container.styles.scss';\nimport Spinner from '../spinner/spinner.component';\n\nconst CatsLazy = React.lazy(() => import('../cats/cats.component'));\n\nconst MainContainer: React.FC = (): JSX.Element => {\n  return (\n    <div className='main-container'>\n      <React.Suspense fallback={<Spinner />}>\n        <CatsLazy />\n      </React.Suspense>\n    </div>\n  );\n};\nexport default MainContainer;\n","import styled, { css, StyledComponent } from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n///////////////////////////////\n///////////////////////////////\n// ACTIVE-PASSIVE sidebar items\n\nconst activeCSS = css`\n  background-color: #fff1;\n  color: #6db4ffdd !important;\n`;\nconst passiveCSS = css`\n  color: #333;\n`;\nconst getLinkStyles = ({ active }: { active: boolean }) => {\n  return active ? activeCSS : passiveCSS;\n};\nexport const LinkStyled: StyledComponent<\n  any,\n  any,\n  object,\n  string | number | symbol\n> = styled(Link)`\n  ${getLinkStyles};\n`;\n\n///////////////////////////////\n///////////////////////////////\n// OPEN-CLOSE aside\n\nconst openCSS = css`\n  transform: translateY(0%);\n  transition: 300ms ease-in-out;\n`;\nconst closedCSS = css`\n  transform: translateY(81%);\n  transition: 300ms ease-in-out;\n`;\nconst getAsideStyles = ({ isOpen }: { isOpen: boolean }) => {\n  return isOpen ? openCSS : closedCSS;\n};\nexport const AsideStyled = styled.aside`\n  z-index: 9;\n  span {\n    display: none;\n  }\n  @media (max-width: 720px) {\n    span {\n      display: inline;\n    }\n    ${getAsideStyles}\n  }\n`;\n","import React, { useLayoutEffect, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { fetchCategoriesStart } from '../../redux/category/category.actions';\nimport './sidebar.styles.scss';\nimport { selectAllCategories } from '../../redux/category/category.selector';\nimport { AsideStyled, LinkStyled } from './sidebar.styles';\n\nconst Sidebar: React.FC = (): JSX.Element => {\n  const location = useLocation();\n  const { pathname } = location;\n\n  const dispatch = useDispatch();\n  useLayoutEffect(() => {\n    dispatch(fetchCategoriesStart());\n  }, []);\n\n  const categoryFromURL = pathname.split('/')[2];\n\n  const categories = useSelector(selectAllCategories);\n\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <AsideStyled\n      onMouseEnter={() => setIsOpen(true)}\n      onMouseLeave={() => setIsOpen(false)}\n      isOpen={isOpen}\n      className='sidebar'\n    >\n      <h2>CATEGORIES</h2>\n\n      {categories?.map(({ id, name }: any) => {\n        return (\n          <LinkStyled\n            active={+id === +categoryFromURL ? true : undefined}\n            to={`/cats/${id}`}\n          >\n            {name}\n          </LinkStyled>\n        );\n      })}\n    </AsideStyled>\n  );\n};\nexport default Sidebar;\n","import React from 'react';\nimport './layout.styles.scss';\nimport MainContainer from '../main-container/main-container.component';\nimport Sidebar from '../sidebar/sidebar.component';\nimport { Route, Switch } from 'react-router-dom';\n\nconst ChooseMessage: React.FC = (): JSX.Element => (\n  <h1 style={{ textAlign: 'center', margin: '4rem', color: '#3332' }}>\n    CHOOSE A CATEGORY\n  </h1>\n);\nconst Layout: React.FC = (): JSX.Element => {\n  return (\n    <div className='layout'>\n      <Sidebar />\n      <Switch>\n        <Route exact path='/' component={ChooseMessage} />\n        <Route exact path='/cats' component={ChooseMessage} />\n        <Route exact path='/cats/:categoryId' component={MainContainer} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Layout;\n","import { createSelector } from 'reselect';\nimport CategoryType from '../../types/category.type';\nimport IState from '../state.interface';\n\nconst selectCategory = (state: IState) => state.category;\n\nexport const selectAllCategories = createSelector(\n  [selectCategory],\n  category => category.categories\n);\n"],"names":["CatsLazy","React","className","fallback","activeCSS","css","passiveCSS","LinkStyled","styled","Link","active","openCSS","closedCSS","AsideStyled","isOpen","pathname","useLocation","dispatch","useDispatch","useLayoutEffect","fetchCategoriesStart","categoryFromURL","split","categories","useSelector","selectAllCategories","useState","setIsOpen","onMouseEnter","onMouseLeave","map","id","name","undefined","to","ChooseMessage","style","textAlign","margin","color","exact","path","component","MainContainer","createSelector","state","category"],"sourceRoot":""}