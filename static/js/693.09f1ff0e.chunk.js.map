{"version":3,"file":"static/js/693.09f1ff0e.chunk.js","mappings":"yMAKaA,GAAgBC,E,OAAAA,IAAe,CAF1B,SAACC,GAAa,OAAKA,EAAMC,GAAI,IAEU,SAAAA,GAAG,OAAIA,EAAIC,IAAI,I,kBCIxE,EANuB,WAAH,OAClB,iBAAKC,UAAU,OAAM,WACnB,gBAAKA,UAAU,YAAW,gBAC1B,cAAGA,UAAU,YAAW,+DACpB,E,kBCDFC,GAAYC,EAAAA,EAAAA,IAAG,mLASfC,GAAeD,EAAAA,EAAAA,IAAG,6FAWXE,EAAYC,EAAAA,GAAAA,IAAU,yEALR,SAAH,GACtB,OADoC,EAARC,SACVL,EAAYE,CAChC,ICkEA,EAxEuB,WACrB,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,MAChBC,GAAeC,EAAAA,EAAAA,MAEfC,GAAUC,EAAAA,EAAAA,IAAYnB,GACtBoB,GAAgBD,EAAAA,EAAAA,IAAYE,EAAAA,GAElC,GAAwBC,EAAAA,EAAAA,UAAS,GAAE,eAA5BC,EAAI,KAAEC,EAAO,KAEpB,GAA8CF,EAAAA,EAAAA,UAAuB,CACnEG,GAAI,GACJC,KAAM,OACN,eAHKC,EAAe,KAAEC,EAAkB,KA6B1C,OAxBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAuBhB,EAASiB,SAASC,MAAM,KAAK,GACpDC,EAAqC,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAec,MAC3C,gBAAGT,EAAE,EAAFA,GAAQ,EAAJC,KAAI,OAAsBD,KAAQK,CAAe,IAE1DlB,GAASuB,EAAAA,EAAAA,IAAeZ,EAAsB,OAAhBU,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBR,IAClD,GAAG,KAEHI,EAAAA,EAAAA,YAAU,WACR,IAUMO,EAAWpB,EAAQqB,QAVH,SAACvB,GACrB,IACMgB,EADehB,EAAbiB,SACyBC,MAAM,KAAK,GACtCC,EAA8C,OAAbb,QAAa,IAAbA,OAAa,EAAbA,EAAec,MACpD,gBAAGT,EAAE,EAAFA,GAAQ,EAAJC,KAAI,OAAsBD,KAAQK,CAAe,IAE1DlB,GAASuB,EAAAA,EAAAA,IAAeZ,EAAsB,OAAhBU,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBR,KAChDG,EAAmBK,EACrB,IAIA,OAAOG,CACT,GAAG,CAAChB,EAAeJ,KAGjB,2BACIE,EAAQoB,QAGR,iCACE,SAAC,EAAI,KACL,gBAAKjC,UAAU,OAAM,SAClBa,EAAQqB,KAAI,gBAAGC,EAAG,EAAHA,IAAKf,EAAE,EAAFA,GAAId,EAAQ,EAARA,SAAQ,OAC/B,SAACF,EAAS,CACRgC,QAAS,kBAAM7B,GAAS8B,EAAAA,EAAAA,IAAejB,GAAI,EAC3CpB,UAAU,MACVM,SAAUA,EACVgC,IAAKH,EAELI,IAAI,WADCnB,EAEL,UAbR,eAAIpB,UAAU,UAAS,sBAkBzB,mBACEoC,QAAS,WACPjB,EAAQD,EAAO,GACfX,GAASiC,EAAAA,EAAAA,IAAmBtB,EAAO,EAAkB,OAAfI,QAAe,IAAfA,OAAe,EAAfA,EAAiBF,IACzD,EAAE,UAEF,yCAIR,C","sources":["redux/cat/cat.selector.ts","components/hint/hint.component.tsx","components/cats/cats.styles.ts","components/cats/cats.component.tsx"],"sourcesContent":["import { createSelector } from 'reselect';\nimport IState from '../state.interface';\n\nconst selectCat = (state: IState) => state.cat;\n\nexport const selectAllCats = createSelector([selectCat], cat => cat.cats);\n","import React from 'react';\nimport './hint.styles.scss';\n\nconst Hint: React.FC = (): JSX.Element => (\n  <div className='hint'>\n    <pre className='hint-icon'>i</pre>\n    <p className='hint-text'>Click an image to zoom, then Tap on it to close</p>\n  </div>\n);\nexport default Hint;\n","import styled, { css } from 'styled-components';\n\n///////////////////////////////\n///////////////////////////////\n// Zoomed cat\n\nconst zoomedCSS = css`\n  transform: scale(2) translate(-8vw, -10vh);\n  position: fixed;\n  z-index: 777;\n  box-shadow: 0vw 0 100vw 100vw #111c;\n\n  top: 50vh;\n  left: 50vw;\n`;\nconst notZoomedCSS = css`\n  border: 2px solid #000a;\n  position: unset;\n  transform: unset;\n`;\n\nconst getCatZoomedStyles = ({ isZoomed }: { isZoomed: boolean }) => {\n  return isZoomed ? zoomedCSS : notZoomedCSS;\n};\n\n// MAIN CAT STYLES\nexport const CatStyled = styled.img`\n  cursor: pointer;\n  max-width: 30vw;\n\n  ${getCatZoomedStyles}\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n  fetchCatsStart,\n  fetchMoreCatsStart,\n  toggleIsZoomed,\n} from '../../redux/cat/cat.actions';\nimport { selectAllCats } from '../../redux/cat/cat.selector';\nimport { selectAllCategories } from '../../redux/category/category.selector';\n\nimport CategoryType from '../../types/category.type';\nimport Hint from '../hint/hint.component';\nimport { CatStyled } from './cats.styles';\n\nimport './cats.styles.scss';\n\nconst Cats: React.FC = (): JSX.Element => {\n  const dispatch = useDispatch();\n  const location: any = useLocation();\n  const history: any = useHistory();\n\n  const catsAll = useSelector(selectAllCats);\n  const categoriesAll = useSelector(selectAllCategories);\n\n  const [page, setPage] = useState(1);\n\n  const [currentCategory, setCurrentCategory] = useState<CategoryType>({\n    id: 15,\n    name: null,\n  });\n\n  useEffect(() => {\n    const categoryFromUrl: any = location.pathname.split('/')[2];\n    const selectedCategory: any = categoriesAll?.find(\n      ({ id, name }: CategoryType) => +id === +categoryFromUrl\n    );\n    dispatch(fetchCatsStart(page, selectedCategory?.id));\n  }, []);\n\n  useEffect(() => {\n    const listenHandler = (location: Location) => {\n      const { pathname } = location;\n      const categoryFromUrl = pathname.split('/')[2];\n      const selectedCategory: CategoryType = categoriesAll?.find(\n        ({ id, name }: CategoryType) => +id === +categoryFromUrl\n      );\n      dispatch(fetchCatsStart(page, selectedCategory?.id));\n      setCurrentCategory(selectedCategory as CategoryType);\n    };\n\n    const unlisten = history.listen(listenHandler);\n\n    return unlisten;\n  }, [categoriesAll, history]);\n\n  return (\n    <div>\n      {!catsAll.length ? (\n        <h1 className='no-cats'>No cats</h1>\n      ) : (\n        <>\n          <Hint />\n          <div className='cats'>\n            {catsAll.map(({ url, id, isZoomed }: any) => (\n              <CatStyled\n                onClick={() => dispatch(toggleIsZoomed(id))}\n                className='cat'\n                isZoomed={isZoomed}\n                src={url}\n                key={id}\n                alt='cat-img'\n              />\n            ))}\n          </div>\n        </>\n      )}\n      <button\n        onClick={() => {\n          setPage(page + 1);\n          dispatch(fetchMoreCatsStart(page + 1, currentCategory?.id as number));\n        }}\n      >\n        <p>load more</p>\n      </button>\n    </div>\n  );\n};\n\nexport default Cats;\n"],"names":["selectAllCats","createSelector","state","cat","cats","className","zoomedCSS","css","notZoomedCSS","CatStyled","styled","isZoomed","dispatch","useDispatch","location","useLocation","history","useHistory","catsAll","useSelector","categoriesAll","selectAllCategories","useState","page","setPage","id","name","currentCategory","setCurrentCategory","useEffect","categoryFromUrl","pathname","split","selectedCategory","find","fetchCatsStart","unlisten","listen","length","map","url","onClick","toggleIsZoomed","src","alt","fetchMoreCatsStart"],"sourceRoot":""}